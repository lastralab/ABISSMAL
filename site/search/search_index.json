{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to ABISSMAL Automated Behavioral tracking by Integrating Sensors that Survey Movements Around a target Location For full documentation visit our wiki ____ _____ _____ _____ __ __ _ /\\ | _ \\_ _|/ ____/ ____| \\/ | /\\ | | / \\ | |_) || | | (___| (___ | \\ / | / \\ | | / /\\ \\ | _ < | | \\___ \\\\___ \\| |\\/| | / /\\ \\ | | / ____ \\| |_) || |_ ____) |___) | | | |/ ____ \\| |____ /_/ \\_\\____/_____|_____/_____/|_| |_/_/ \\_\\______| Pre-requisites Setup Raspberry Pi by following these steps Raspberry Pi 4 (2 or 4Gb) Raspberry Pi SD card (32Gb or 64 Gb with Rasbian Buster pre-installed) Python version: 3.7 Setup sensors and other hardware Before starting, get to know the basics of: Linux Screen and Cron jobs Installing ABISSMAL cd ~/Desktop - Navigate to the Raspberry Pi's Desktop directory git clone https://github.com/lastralab/ABISSMAL.git - Clone the repository cd ABISSMAL - Access the project root directory sudo chmod +x *.sh - Make files executable sudo ./run_install.sh - Initiate the installation script, enter the following information: Insert y/Y to install required packages if it's the first time using ABISSMAL, this can be skipped later on. Enter your Twilio Account SID to enable SMS alerts or press \"Enter\" key to skip Wait for it to restart NOTE: If you are using SSH connection you will have to mount the external hard drive manually Directory Structure run_install.sh # The installer script. This needs to run everytime you pull a new version of the repository Main.sh # The script that initiates the ABISSMAL tracking system cron.sh # This script is automatically used by ABISSMAL for data collection, system monitoring and error logging Modules/ Backups.py # Responsible for transfering data from the Pi to an external hard drive using cron monitor.py # System monitoring IRBB.py # Collects data from two pairs of infrared beam breakers RFID.py # Collects data from the 125kHz CognIot radio frequency identification (RFID) reader Temp.py # Collects data from the waterproof 1-wire DS18B20 temperature sensor Video.py # Records videos by motion detection using a Raspberry Pi (H) infrared fisheye lens camera with infrared LEDs helper.py # Contains helper functions such as the CSV writter, directory setup and sms alerts log.py # Resposible for the global Logger setup alt_video.py # Responsible to record alternative videos for validation (can only run on a raspberry pi without the other modules enabled) R/ ... # General documentation for data processing and integration functions 3D/ ... # Holds 3D-printing designs for customized hardware in .stl format VideoConcatenation/ ... # Optional scripts for video concatenation with ffmpeg","title":"Home"},{"location":"#welcome-to-abissmal","text":"Automated Behavioral tracking by Integrating Sensors that Survey Movements Around a target Location For full documentation visit our wiki ____ _____ _____ _____ __ __ _ /\\ | _ \\_ _|/ ____/ ____| \\/ | /\\ | | / \\ | |_) || | | (___| (___ | \\ / | / \\ | | / /\\ \\ | _ < | | \\___ \\\\___ \\| |\\/| | / /\\ \\ | | / ____ \\| |_) || |_ ____) |___) | | | |/ ____ \\| |____ /_/ \\_\\____/_____|_____/_____/|_| |_/_/ \\_\\______|","title":"Welcome to ABISSMAL"},{"location":"#pre-requisites","text":"Setup Raspberry Pi by following these steps Raspberry Pi 4 (2 or 4Gb) Raspberry Pi SD card (32Gb or 64 Gb with Rasbian Buster pre-installed) Python version: 3.7 Setup sensors and other hardware Before starting, get to know the basics of: Linux Screen and Cron jobs","title":"Pre-requisites"},{"location":"#installing-abissmal","text":"cd ~/Desktop - Navigate to the Raspberry Pi's Desktop directory git clone https://github.com/lastralab/ABISSMAL.git - Clone the repository cd ABISSMAL - Access the project root directory sudo chmod +x *.sh - Make files executable sudo ./run_install.sh - Initiate the installation script, enter the following information: Insert y/Y to install required packages if it's the first time using ABISSMAL, this can be skipped later on. Enter your Twilio Account SID to enable SMS alerts or press \"Enter\" key to skip Wait for it to restart NOTE: If you are using SSH connection you will have to mount the external hard drive manually","title":"Installing ABISSMAL"},{"location":"#directory-structure","text":"run_install.sh # The installer script. This needs to run everytime you pull a new version of the repository Main.sh # The script that initiates the ABISSMAL tracking system cron.sh # This script is automatically used by ABISSMAL for data collection, system monitoring and error logging Modules/ Backups.py # Responsible for transfering data from the Pi to an external hard drive using cron monitor.py # System monitoring IRBB.py # Collects data from two pairs of infrared beam breakers RFID.py # Collects data from the 125kHz CognIot radio frequency identification (RFID) reader Temp.py # Collects data from the waterproof 1-wire DS18B20 temperature sensor Video.py # Records videos by motion detection using a Raspberry Pi (H) infrared fisheye lens camera with infrared LEDs helper.py # Contains helper functions such as the CSV writter, directory setup and sms alerts log.py # Resposible for the global Logger setup alt_video.py # Responsible to record alternative videos for validation (can only run on a raspberry pi without the other modules enabled) R/ ... # General documentation for data processing and integration functions 3D/ ... # Holds 3D-printing designs for customized hardware in .stl format VideoConcatenation/ ... # Optional scripts for video concatenation with ffmpeg","title":"Directory Structure"},{"location":"abissmal/","text":"Usage Automated Behavioral tracking by Integrating Sensors that Survey Movements Around a target Location For full documentation visit our wiki Running ABISSMAL ./Main.sh - Initiate ABISSMAL to start collecting data Logs Search log files to help with troubleshooting grep -nir \"ERROR\" /home/pi/log/ - Find errors tail -f /home/pi/log/abissmal_Box_01.log - See logs in real time using tail tail -f /home/pi/log/abissmal_Box_01.log | grep \"Videos recorded\" - Use specific strings to tail du -s -h /media/pi/<YourDriveName>/<DataPath>/* - Monitor external drive space: df -h /media/pi/Box_01/ - Example output: Filesystem Size Used Avail Use% Mounted on /dev/sda1 932G 35G 897G 4% /media/pi/Box_01 grep -nir \"INFO\" /home/pi/log/ - See useful information Software Troubleshooting run_install executed more than once on the same Pi If you run run_install.sh more than once, make sure there's only one line in /etc/crontab that specifies the Abissmal cron job, otherwise remove the duplicated lines with vim/nano editor as sudo. To see cron logging during or after the tracking system is running, open a terminal window and run tail -f /home/pi/log/abissmal_cron.log No sockets found after executing Main.sh This error usually indicates that one of the devices to the Pi wasn't set up correctly, which caused one or more screens to fail. Check that you set up all devices correctly. For instance, for the temperature sensor to work, it needs to be connected to 3V power and GPIO pin #4 for 1-wire data transfer. The Pi also needs to be set up to communicate with this device before running Main.sh . SSH Connection - External Drive not found When using ssh connection to the raspberry pi, the external drive might not be found in /media/pi/ . A few extra steps are required in order for it to be used by the Backups.py script. Mount the external drive using sudo sudo mount /dev/sda1 /media/pi/YourEDName Give it permissions so that username 'pi' can write in it: sudo -s chmod -R 777 /media/pi/YourExternalDriveName/Data exit Note: Exit root mode so you won't run anything else under the root user LED still ON after detaching all screens Open terminal in root folder, run: screen -r irbb Hit Ctrl + C Hardware Troubleshooting Make sure to test the different hardware components used for this tracking system before discarding a sensor. For instance, if a screen is continuously failing for a given sensor, start by checking whether the sensor is still connected to the PCB or the Pi. If the connection looks ok, then check and swap out the jumper cable harnesses or ribbon cable, custom-soldered PCB, and the sensor itself to test whether any of these individual components are causing problems. mmal memory or Video timed out while waiting for capture to end This error arises when the camera ribbon cable isn't connected well to either the Pi or the camera, but can also arise if a ribbon cable has been damaged. If you see this error, it's worth starting with testing the connection itself (e.g. disconnect and reconnect the ribbon cable), then swapping out ribbon cables to see if that fixes the issue. If not, then the camera module itself may be bad. RFID reader not working In our experience, issues with the CognIoT RFID reader are usually caused by issues with setting up the Pi for compatibility with this device. Make sure to run all setup steps in the Set up Raspberry Pi and tracking system software protocol. The RFID reader has an onboard LED that is helpful for troubleshooting. This light should be red when the reader is connected to a Pi that is powered on. If the red LED is blinking, then the antenna connection is missing or bad. The LED should turn green when it detects a PIT tag. If this LED doesn't change to green when you move a PIT tag near the antenna, then you may need to configure the RFID reader. To do this, use the following steps: Connect the Raspberry Pi to the display, mouse, keyboard, and power cord Connect the GPIO ribbon cable to the Raspberry Pi and the customized PCB Connect the custom loop antenna to the RFID reader, then connect the RFID reader to the custom PCB with the jumper cable harnesses. Make sure these are connected in the right orientation Test the connections on the jumper cables for continuity while the Pi remains powered off. Set the multimeter to the sound check for continuity and touch the positive end of the multimeter to one pin header on the PCB and the corresponding jumper cable header connected to the Pi. GPIO connections that are the same (e.g. #4 on the Pi and PCB) should have continuity, but GPIO that are different should njot have continuity (e.g. 5v0 and GND) Turn the Pi on, and check that the red LED on RFID reader is on. If this is not on, or it's blinking, then there is an issue with the connection to the antenna Open a new terminal window, and navigate to the Modules folder inside the Abissmal folder. Change the working directory below if you installed the software elsewhere: cd /home/pi/Desktop/Abissmal/Modules Run the file called RFID_CognIot_Original.py in order to configure the RFID reader python RFID_CognIot_Original.py Follow the prompts on the terminal in order to configure the RFID reader to detect PIT tags that will be used in experiments: Select option \"v\" and then \"c\" or \"C\" to change the reader operating mode to be compatible with the EM1042 PIT tags When taken back to the main option menu, select option \"S\", pass the PIT tag over the antenna (the LED on the RFID reader should turn green when the tag is detected), and watch the output on the terminal to check that the reader is recognizing the PIT tag Shut down the Pi, then disconnect the RFID reader Blank display with tracking system running If you want to leave a Pi connected to a display in order to easily check data throughout the course of an experiment, you may run into issues with the display screen automatically blanking. Screen blanking can make it seem like a Pi is not working. Screen blanking is likely the problem when a monitor is blank and will not turn on even when you engage the Pi through a keyboard, but you can see that the RFID reader LED is red and not blinking. In order to fix this issue, you should turn off the display screen blanking, and also turn off the power save option for displays. Some of these commands may need to be run if the Pi is rebooted before running the tracking system: Run sudo raspi-config in a terminal window Select \"2 Display Options Configure Display Settings\" Select \"4 Screen blanking enable / disable screen blanking\" Select \"No\" when asked whether you want to enable screen blanking. You can also select this preference through the \"Preferences\" tab in the GUI Run the following commands in a terminal window (check the status of power-saving, then turn power-saving off, then check the status to confirm): iw wlan0 get power_save sudo iw dev wlan0 set power_save off iw wlan0 get power_save","title":"Usage"},{"location":"abissmal/#usage","text":"Automated Behavioral tracking by Integrating Sensors that Survey Movements Around a target Location For full documentation visit our wiki","title":"Usage"},{"location":"abissmal/#running-abissmal","text":"./Main.sh - Initiate ABISSMAL to start collecting data","title":"Running ABISSMAL"},{"location":"abissmal/#logs","text":"Search log files to help with troubleshooting grep -nir \"ERROR\" /home/pi/log/ - Find errors tail -f /home/pi/log/abissmal_Box_01.log - See logs in real time using tail tail -f /home/pi/log/abissmal_Box_01.log | grep \"Videos recorded\" - Use specific strings to tail du -s -h /media/pi/<YourDriveName>/<DataPath>/* - Monitor external drive space: df -h /media/pi/Box_01/ - Example output: Filesystem Size Used Avail Use% Mounted on /dev/sda1 932G 35G 897G 4% /media/pi/Box_01 grep -nir \"INFO\" /home/pi/log/ - See useful information","title":"Logs"},{"location":"abissmal/#software-troubleshooting","text":"","title":"Software Troubleshooting"},{"location":"abissmal/#run_install-executed-more-than-once-on-the-same-pi","text":"If you run run_install.sh more than once, make sure there's only one line in /etc/crontab that specifies the Abissmal cron job, otherwise remove the duplicated lines with vim/nano editor as sudo. To see cron logging during or after the tracking system is running, open a terminal window and run tail -f /home/pi/log/abissmal_cron.log","title":"run_install executed more than once on the same Pi"},{"location":"abissmal/#no-sockets-found-after-executing-mainsh","text":"This error usually indicates that one of the devices to the Pi wasn't set up correctly, which caused one or more screens to fail. Check that you set up all devices correctly. For instance, for the temperature sensor to work, it needs to be connected to 3V power and GPIO pin #4 for 1-wire data transfer. The Pi also needs to be set up to communicate with this device before running Main.sh .","title":"No sockets found after executing Main.sh"},{"location":"abissmal/#ssh-connection-external-drive-not-found","text":"When using ssh connection to the raspberry pi, the external drive might not be found in /media/pi/ . A few extra steps are required in order for it to be used by the Backups.py script. Mount the external drive using sudo sudo mount /dev/sda1 /media/pi/YourEDName Give it permissions so that username 'pi' can write in it: sudo -s chmod -R 777 /media/pi/YourExternalDriveName/Data exit Note: Exit root mode so you won't run anything else under the root user","title":"SSH Connection - External Drive not found"},{"location":"abissmal/#led-still-on-after-detaching-all-screens","text":"Open terminal in root folder, run: screen -r irbb Hit Ctrl + C","title":"LED still ON after detaching all screens"},{"location":"abissmal/#hardware-troubleshooting","text":"Make sure to test the different hardware components used for this tracking system before discarding a sensor. For instance, if a screen is continuously failing for a given sensor, start by checking whether the sensor is still connected to the PCB or the Pi. If the connection looks ok, then check and swap out the jumper cable harnesses or ribbon cable, custom-soldered PCB, and the sensor itself to test whether any of these individual components are causing problems.","title":"Hardware Troubleshooting"},{"location":"abissmal/#mmal-memory-or-video-timed-out-while-waiting-for-capture-to-end","text":"This error arises when the camera ribbon cable isn't connected well to either the Pi or the camera, but can also arise if a ribbon cable has been damaged. If you see this error, it's worth starting with testing the connection itself (e.g. disconnect and reconnect the ribbon cable), then swapping out ribbon cables to see if that fixes the issue. If not, then the camera module itself may be bad.","title":"mmal memory or Video timed out while waiting for capture to end"},{"location":"abissmal/#rfid-reader-not-working","text":"In our experience, issues with the CognIoT RFID reader are usually caused by issues with setting up the Pi for compatibility with this device. Make sure to run all setup steps in the Set up Raspberry Pi and tracking system software protocol. The RFID reader has an onboard LED that is helpful for troubleshooting. This light should be red when the reader is connected to a Pi that is powered on. If the red LED is blinking, then the antenna connection is missing or bad. The LED should turn green when it detects a PIT tag. If this LED doesn't change to green when you move a PIT tag near the antenna, then you may need to configure the RFID reader. To do this, use the following steps: Connect the Raspberry Pi to the display, mouse, keyboard, and power cord Connect the GPIO ribbon cable to the Raspberry Pi and the customized PCB Connect the custom loop antenna to the RFID reader, then connect the RFID reader to the custom PCB with the jumper cable harnesses. Make sure these are connected in the right orientation Test the connections on the jumper cables for continuity while the Pi remains powered off. Set the multimeter to the sound check for continuity and touch the positive end of the multimeter to one pin header on the PCB and the corresponding jumper cable header connected to the Pi. GPIO connections that are the same (e.g. #4 on the Pi and PCB) should have continuity, but GPIO that are different should njot have continuity (e.g. 5v0 and GND) Turn the Pi on, and check that the red LED on RFID reader is on. If this is not on, or it's blinking, then there is an issue with the connection to the antenna Open a new terminal window, and navigate to the Modules folder inside the Abissmal folder. Change the working directory below if you installed the software elsewhere: cd /home/pi/Desktop/Abissmal/Modules Run the file called RFID_CognIot_Original.py in order to configure the RFID reader python RFID_CognIot_Original.py Follow the prompts on the terminal in order to configure the RFID reader to detect PIT tags that will be used in experiments: Select option \"v\" and then \"c\" or \"C\" to change the reader operating mode to be compatible with the EM1042 PIT tags When taken back to the main option menu, select option \"S\", pass the PIT tag over the antenna (the LED on the RFID reader should turn green when the tag is detected), and watch the output on the terminal to check that the reader is recognizing the PIT tag Shut down the Pi, then disconnect the RFID reader","title":"RFID reader not working"},{"location":"abissmal/#blank-display-with-tracking-system-running","text":"If you want to leave a Pi connected to a display in order to easily check data throughout the course of an experiment, you may run into issues with the display screen automatically blanking. Screen blanking can make it seem like a Pi is not working. Screen blanking is likely the problem when a monitor is blank and will not turn on even when you engage the Pi through a keyboard, but you can see that the RFID reader LED is red and not blinking. In order to fix this issue, you should turn off the display screen blanking, and also turn off the power save option for displays. Some of these commands may need to be run if the Pi is rebooted before running the tracking system: Run sudo raspi-config in a terminal window Select \"2 Display Options Configure Display Settings\" Select \"4 Screen blanking enable / disable screen blanking\" Select \"No\" when asked whether you want to enable screen blanking. You can also select this preference through the \"Preferences\" tab in the GUI Run the following commands in a terminal window (check the status of power-saving, then turn power-saving off, then check the status to confirm): iw wlan0 get power_save sudo iw dev wlan0 set power_save off iw wlan0 get power_save","title":"Blank display with tracking system running"},{"location":"about/","text":"ABISSMAL Automated Behavioral tracking by Integrating Sensors that Survey Movements Around a target Location For full documentation visit our wiki About ABISSMAL is a hardware and software platform for automated behavioral tracking with built-in system monitoring and error logging. ABISSMAL also provides the capacity to make behavioral inferences by integrating data across multiple types of movement sensors. We tested the tracking system by tracking parental care behaviors with captive zebra finches that raised young birds over 50 days. The system operates different modules written in python and managed by Linux Screen sessions scheduled by cron. See the accompanying methods manuscript for more detailed information about ABISSMAL. Our Wiki page has detailed information about how to set up and build hardware, as well as software installation and troubleshooting. Github Collaborators Tania Molina (Lead Developer/Project Manager): tanismo[at]lastralab.com Grace Smith-Vidaurre, PhD (Developer): gsvidaurre[at]gmail.com Manuscript in preparation Smith-Vidaurre, G., Molina, T., Jarvis, E.D., and Hobson, E.A. (2023). Automated tracking of avian parental care behavior. In prep. EcoEvoRxiv preprint: https://doi.org/10.32942/X2Z60C","title":"About"},{"location":"about/#abissmal","text":"Automated Behavioral tracking by Integrating Sensors that Survey Movements Around a target Location For full documentation visit our wiki","title":"ABISSMAL"},{"location":"about/#about","text":"ABISSMAL is a hardware and software platform for automated behavioral tracking with built-in system monitoring and error logging. ABISSMAL also provides the capacity to make behavioral inferences by integrating data across multiple types of movement sensors. We tested the tracking system by tracking parental care behaviors with captive zebra finches that raised young birds over 50 days. The system operates different modules written in python and managed by Linux Screen sessions scheduled by cron. See the accompanying methods manuscript for more detailed information about ABISSMAL. Our Wiki page has detailed information about how to set up and build hardware, as well as software installation and troubleshooting.","title":"About"},{"location":"about/#github-collaborators","text":"Tania Molina (Lead Developer/Project Manager): tanismo[at]lastralab.com Grace Smith-Vidaurre, PhD (Developer): gsvidaurre[at]gmail.com","title":"Github Collaborators"},{"location":"about/#manuscript-in-preparation","text":"Smith-Vidaurre, G., Molina, T., Jarvis, E.D., and Hobson, E.A. (2023). Automated tracking of avian parental care behavior. In prep. EcoEvoRxiv preprint: https://doi.org/10.32942/X2Z60C","title":"Manuscript in preparation"},{"location":"opensource/","text":"Github Collaboration For full documentation visit our wiki Gitflow Collaborators Set up a local replicate of the tracking system that is separate from the code owner Make sure that issues that require modifying the same file are merged to avoid conflicts downstream (copy and paste into a single issue, close the other). Alternatively, work on these issues one at a time (after one issue was merged to main) For every issue that requires developing or modifying code, create a local branch with the issue number (e.g. PCT-10 for issue #10) from the main branch (e.g. see Git workflow above) git checkout main git branch to confirm that you're on the main branch git fetch git pull git checkout -b PCT-[insert issue number] git branch to confirm that you're on the new local branch Make changes on this local branch Test changes on the local branch by running the tracking system and checking for anticipated outcomes or errors Commit local changes and push them to the same branch in the remote master (may need to publish the local branch remotely) git fetch git pull git add ./[name of files(s)] git commit -m '[PCT-000] Then add your message' git push Make a pull request to merge the remote version of the local branch with the staging branch The code owner tests the updates on their local tracking system (see above) before confirming the pull request and merging the changes to the main branch Setup Git credentials before cloning These steps will save time instead of entering your Git credentials over and over. Create a new github token and store it safely. Store settings locally: git config --global credential.helper store Clone repository: git clone https://github.com/lastralab/Abissmal.git Insert credentials using your new token as password","title":"Open Source"},{"location":"opensource/#github-collaboration","text":"For full documentation visit our wiki","title":"Github Collaboration"},{"location":"opensource/#gitflow","text":"","title":"Gitflow"},{"location":"opensource/#collaborators","text":"Set up a local replicate of the tracking system that is separate from the code owner Make sure that issues that require modifying the same file are merged to avoid conflicts downstream (copy and paste into a single issue, close the other). Alternatively, work on these issues one at a time (after one issue was merged to main) For every issue that requires developing or modifying code, create a local branch with the issue number (e.g. PCT-10 for issue #10) from the main branch (e.g. see Git workflow above) git checkout main git branch to confirm that you're on the main branch git fetch git pull git checkout -b PCT-[insert issue number] git branch to confirm that you're on the new local branch Make changes on this local branch Test changes on the local branch by running the tracking system and checking for anticipated outcomes or errors Commit local changes and push them to the same branch in the remote master (may need to publish the local branch remotely) git fetch git pull git add ./[name of files(s)] git commit -m '[PCT-000] Then add your message' git push Make a pull request to merge the remote version of the local branch with the staging branch The code owner tests the updates on their local tracking system (see above) before confirming the pull request and merging the changes to the main branch","title":"Collaborators"}]}